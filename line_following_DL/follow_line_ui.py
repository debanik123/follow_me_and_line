# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'follow_line_base.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from graph_motion_planning import GraphAnalyzer  
import threading

class Ui_MainWindow(object):
    def __init__(self):
        self.deep_violet = "background-color: #9400D3;"
        self.blue_text = "color: blue;"
        self.green_text = "color: green;"
        self.bg_blue = "background-color: blue;"
        self._translate = QtCore.QCoreApplication.translate
        self.start = None
        self.end = None
        self.stop = 0

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(918, 521)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.wonbot = QtWidgets.QToolButton(self.centralwidget)
        self.wonbot.setGeometry(QtCore.QRect(20, 40, 141, 51))
        self.wonbot.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/wonbot_2_인쇄용-02.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.wonbot.setIcon(icon)
        self.wonbot.setIconSize(QtCore.QSize(200, 200))
        self.wonbot.setObjectName("wonbot")
        self.obstracle_icon = QtWidgets.QToolButton(self.centralwidget)
        self.obstracle_icon.setGeometry(QtCore.QRect(660, 50, 41, 41))
        self.obstracle_icon.setText("")

        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/obstracle_yes.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon1.addPixmap(QtGui.QPixmap("icons/obstracle_no.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.obstracle_icon.setIcon(icon1)
        self.obstracle_icon.setIconSize(QtCore.QSize(200, 200))
        self.obstracle_icon.setObjectName("obstracle_icon")

        self.obstracle_alert_status = QtWidgets.QLabel(self.centralwidget)
        self.obstracle_alert_status.setGeometry(QtCore.QRect(530, 50, 121, 31))
        self.obstracle_alert_status.setObjectName("obstracle_alert_status")
        
        self.line_following_status = QtWidgets.QLabel(self.centralwidget)
        self.line_following_status.setGeometry(QtCore.QRect(300, 50, 151, 31))
        self.line_following_status.setObjectName("line_following_status")
        self.push_folllow_line = QtWidgets.QPushButton(self.centralwidget)
        self.push_folllow_line.setGeometry(QtCore.QRect(300, 120, 121, 41))
        self.push_folllow_line.setStyleSheet(self.bg_blue)
        self.push_folllow_line.setObjectName("push_folllow_line")
        self.push_folllow_line.clicked.connect(self.follow_line_callback)

        

        self.go_to_station = QtWidgets.QLabel(self.centralwidget)
        self.go_to_station.setGeometry(QtCore.QRect(400, 170, 101, 31))
        self.go_to_station.setTextFormat(QtCore.Qt.AutoText)
        self.go_to_station.setObjectName("go_to_station")
        self.go_to_station.setStyleSheet(self.blue_text)

        self.push_go = QtWidgets.QPushButton(self.centralwidget)
        self.push_go.setGeometry(QtCore.QRect(400, 360, 81, 31))
        self.push_go.setCheckable(False)
        self.push_go.setChecked(False)
        self.push_go.setAutoRepeat(False)
        self.push_go.setObjectName("push_go")
        self.push_go.setStyleSheet("background-color: gray; color: blue;")
        self.push_go.clicked.connect(self.go_callback)

        self.start_station = QtWidgets.QLabel(self.centralwidget)
        self.start_station.setGeometry(QtCore.QRect(290, 400, 111, 31))
        self.start_station.setObjectName("start_station")
        self.end_station = QtWidgets.QLabel(self.centralwidget)
        self.end_station.setGeometry(QtCore.QRect(490, 400, 111, 31))
        self.end_station.setObjectName("end_station")

        self.battery = QtWidgets.QToolButton(self.centralwidget)
        self.battery.setGeometry(QtCore.QRect(720, 50, 31, 41))
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons/battery-status.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.battery.setIcon(icon2)
        self.battery.setIconSize(QtCore.QSize(30, 30))
        self.battery.setObjectName("battery")

        self.power_off = QtWidgets.QPushButton(self.centralwidget)
        self.power_off.setGeometry(QtCore.QRect(780, 120, 61, 41))
        self.power_off.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons/power-off.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.power_off.setIcon(icon3)
        self.power_off.setIconSize(QtCore.QSize(40, 40))
        self.power_off.setObjectName("power_off")

        self.reset = QtWidgets.QPushButton(self.centralwidget)
        self.reset.setGeometry(QtCore.QRect(680, 120, 61, 41))
        self.reset.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icons/reset.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.reset.setIcon(icon4)
        self.reset.setIconSize(QtCore.QSize(40, 40))
        self.reset.setObjectName("reset")
        self.reset.clicked.connect(self.reset_callback)

        self.resume = QtWidgets.QPushButton(self.centralwidget)
        self.resume.setGeometry(QtCore.QRect(580, 120, 61, 41))
        self.resume.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icons/resume.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.resume.setIcon(icon5)
        self.resume.setIconSize(QtCore.QSize(30, 30))
        self.resume.setObjectName("resume")

        self.emergency_stop = QtWidgets.QPushButton(self.centralwidget)
        self.emergency_stop.setGeometry(QtCore.QRect(470, 120, 61, 41))
        self.emergency_stop.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("icons/stop-button.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.emergency_stop.setIcon(icon6)
        self.emergency_stop.setIconSize(QtCore.QSize(40, 40))
        self.emergency_stop.setObjectName("emergency_stop")

        self.dateTimeLabel = QtWidgets.QLabel(self.centralwidget)
        self.dateTimeLabel.setGeometry(QtCore.QRect(760, 60, 151, 26))
        self.dateTimeLabel.setObjectName("dateTimeLabel")

        self.update_date_time()

        self.timer = QtCore.QTimer(MainWindow)
        self.timer.timeout.connect(self.update_date_time)
        self.timer.start(1000)

        self.push_1 = QtWidgets.QPushButton(self.centralwidget)
        self.push_1.setGeometry(QtCore.QRect(20, 210, 89, 51))
        self.push_1.setObjectName("push_1")
        self.push_1.setStyleSheet(self.deep_violet)
        self.push_1.clicked.connect(self.push_1_callback)

        self.push_2 = QtWidgets.QPushButton(self.centralwidget)
        self.push_2.setGeometry(QtCore.QRect(280, 210, 89, 51))
        self.push_2.setObjectName("push_2")
        self.push_2.clicked.connect(self.push_2_callback)

        self.push_3 = QtWidgets.QPushButton(self.centralwidget)
        self.push_3.setGeometry(QtCore.QRect(150, 210, 89, 51))
        self.push_3.setObjectName("push_3")
        self.push_3.clicked.connect(self.push_3_callback)

        # Continue for buttons push_4 to push_14
        self.push_4 = QtWidgets.QPushButton(self.centralwidget)
        self.push_4.setGeometry(QtCore.QRect(400, 210, 89, 51))
        self.push_4.setObjectName("push_4")
        self.push_4.clicked.connect(self.push_4_callback)

        self.push_5 = QtWidgets.QPushButton(self.centralwidget)
        self.push_5.setGeometry(QtCore.QRect(520, 210, 89, 51))
        self.push_5.setObjectName("push_5")
        self.push_5.clicked.connect(self.push_5_callback)

        self.push_6 = QtWidgets.QPushButton(self.centralwidget)
        self.push_6.setGeometry(QtCore.QRect(650, 210, 89, 51))
        self.push_6.setObjectName("push_6")
        self.push_6.clicked.connect(self.push_6_callback)

        self.push_7 = QtWidgets.QPushButton(self.centralwidget)
        self.push_7.setGeometry(QtCore.QRect(790, 210, 89, 51))
        self.push_7.setObjectName("push_7")
        self.push_7.clicked.connect(self.push_7_callback)

        self.push_8 = QtWidgets.QPushButton(self.centralwidget)
        self.push_8.setGeometry(QtCore.QRect(20, 290, 89, 51))
        self.push_8.setObjectName("push_8")
        self.push_8.clicked.connect(self.push_8_callback)

        self.push_9 = QtWidgets.QPushButton(self.centralwidget)
        self.push_9.setGeometry(QtCore.QRect(150, 290, 89, 51))
        self.push_9.setObjectName("push_9")
        self.push_9.clicked.connect(self.push_9_callback)

        self.push_10 = QtWidgets.QPushButton(self.centralwidget)
        self.push_10.setGeometry(QtCore.QRect(280, 290, 89, 51))
        self.push_10.setObjectName("push_10")
        self.push_10.clicked.connect(self.push_10_callback)

        self.push_11 = QtWidgets.QPushButton(self.centralwidget)
        self.push_11.setGeometry(QtCore.QRect(400, 290, 89, 51))
        self.push_11.setObjectName("push_11")
        self.push_11.clicked.connect(self.push_11_callback)

        self.push_12 = QtWidgets.QPushButton(self.centralwidget)
        self.push_12.setGeometry(QtCore.QRect(520, 290, 89, 51))
        self.push_12.setObjectName("push_12")
        self.push_12.clicked.connect(self.push_12_callback)

        self.push_13 = QtWidgets.QPushButton(self.centralwidget)
        self.push_13.setGeometry(QtCore.QRect(650, 290, 89, 51))
        self.push_13.setObjectName("push_13")
        self.push_13.clicked.connect(self.push_13_callback)

        self.push_14 = QtWidgets.QPushButton(self.centralwidget)
        self.push_14.setGeometry(QtCore.QRect(790, 290, 89, 51))
        self.push_14.setObjectName("push_14")
        self.push_14.clicked.connect(self.push_14_callback)

        buttons = [
            self.push_1, self.push_2, self.push_3, self.push_4,
            self.push_5, self.push_6, self.push_7, self.push_8,
            self.push_9, self.push_10, self.push_11, self.push_12,
            self.push_13, self.push_14
        ]

        for button in buttons:
            button.setStyleSheet(self.deep_violet)
            # button.clicked.connect(self.button_callback)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 918, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.obstracle_alert_status.setText(_translate("MainWindow", "Obstracle Status"))
        self.line_following_status.setText(_translate("MainWindow", "Line Follow status: 0"))
        self.push_folllow_line.setText(_translate("MainWindow", "Follow Line"))
        
        self.push_1.setText(_translate("MainWindow", "1"))
        self.push_2.setText(_translate("MainWindow", "2"))
        self.push_3.setText(_translate("MainWindow", "3"))
        self.push_4.setText(_translate("MainWindow", "4"))
        self.push_5.setText(_translate("MainWindow", "5"))
        self.push_6.setText(_translate("MainWindow", "6"))
        self.push_7.setText(_translate("MainWindow", "7"))
        self.push_8.setText(_translate("MainWindow", "8"))
        self.push_9.setText(_translate("MainWindow", "9"))
        self.push_10.setText(_translate("MainWindow", "10"))
        self.push_11.setText(_translate("MainWindow", "11"))
        self.push_12.setText(_translate("MainWindow", "12"))
        self.push_13.setText(_translate("MainWindow", "13"))
        self.push_14.setText(_translate("MainWindow", "14"))

        self.go_to_station.setText(_translate("MainWindow", "Go to Station"))
        self.push_go.setText(_translate("MainWindow", "Go"))
        self.start_station.setText(_translate("MainWindow", "Start Station : 1"))
        self.end_station.setText(_translate("MainWindow", "End Station : 2"))
        self.battery.setText(_translate("MainWindow", "..."))
        
    
    def follow_line_callback(self):
        # print("Follow Line button clicked")
        # Add your logic for the "Follow Line" action here
        self.line_following_status.setStyleSheet("background-color: green;")

    def reset_callback(self):
        self.start = None
        self.end = None
        self.update_station()
        self.push_go.setEnabled(True)
        self.push_go.setStyleSheet("background-color: gray; color: blue;")
        draw_thread = threading.Thread(target=self.graph_analyzer.draw_graph, kwargs={'highlight_path': None, 'vertex_edge_dict': None})
        draw_thread.start()

    def update_station(self):
        if self.start is not None and self.start != self.end:
            self.start_station.setText(self._translate("MainWindow", "Start Station : "+str(self.start)))
        else:
            self.start_station.setText(self._translate("MainWindow", "Start Station : "))
        
        if self.end is not None and self.start != self.end:
            self.end_station.setText(self._translate("MainWindow", "End Station : "+str(self.end)))
        else:
            self.end_station.setText(self._translate("MainWindow", "End Station : "))
    
    def go_callback(self):
        if self.start and self.end and self.start != self.end:
            print("Go to sarting point "+ str(self.start) +" to end point "+ str(self.end))
            self.path_list(self.start, self.end)
            self.push_go.setStyleSheet("background-color: green; color: blue;")
            self.push_go.setDisabled(True)
        else:
            print("Goal points are not Valied")
    
    def emergency_stop_callback(self):
        self.stop = 1
        print("Pressed Emergency stop")

    def resume_callback(self):
        self.stop = 0
        print("Resume The robot")
    
    def update_date_time(self):
        current_datetime = QtCore.QDateTime.currentDateTime()
        self.dateTimeLabel.setText(current_datetime.toString("yyyy-MM-dd hh:mm:ss"))
        
    def push_1_callback(self):
        if self.start:
            self.end = 1

        if self.start is None:
            self.start = 1
            self.end = None

        self.update_station()

    def push_2_callback(self):
        if self.start:
            self.end = 2

        if self.start is None:
            self.start = 2
            self.end = None

        self.update_station()

    def push_3_callback(self):
        if self.start:
            self.end = 3

        if self.start is None:
            self.start = 3
            self.end = None

        self.update_station()

    def push_4_callback(self):
        if self.start:
            self.end = 4

        if self.start is None:
            self.start = 4
            self.end = None

        self.update_station()

    def push_5_callback(self):
        if self.start:
            self.end = 5

        if self.start is None:
            self.start = 5
            self.end = None

        self.update_station()

    def push_6_callback(self):
        if self.start:
            self.end = 6

        if self.start is None:
            self.start = 6
            self.end = None

        self.update_station()

    def push_7_callback(self):
        if self.start:
            self.end = 7

        if self.start is None:
            self.start = 7
            self.end = None

        self.update_station()

    def push_8_callback(self):
        if self.start:
            self.end = 8

        if self.start is None:
            self.start = 8
            self.end = None

        self.update_station()

    def push_9_callback(self):
        if self.start:
            self.end = 9

        if self.start is None:
            self.start = 9
            self.end = None

        self.update_station()

    def push_10_callback(self):
        if self.start:
            self.end = 10

        if self.start is None:
            self.start = 10
            self.end = None

        self.update_station()

    def push_11_callback(self):
        if self.start:
            self.end = 11

        if self.start is None:
            self.start = 11
            self.end = None

        self.update_station()

    def push_12_callback(self):
        if self.start:
            self.end = 12

        if self.start is None:
            self.start = 12
            self.end = None

        self.update_station()

    def push_13_callback(self):
        if self.start:
            self.end = 13

        if self.start is None:
            self.start = 13
            self.end = None

        self.update_station()

    def push_14_callback(self):
        if self.start:
            self.end = 14

        if self.start is None:
            self.start = 14
            self.end = None

        self.update_station()

    def path_list(self, start, end):
        start_node = start
        end_node = end
        self.graph_analyzer = GraphAnalyzer('config/vtx_edg.json', start_node, end_node)

        # Use the methods of the object
        path = self.graph_analyzer.find_shortest_path()

        if path:
            print(f"Shortest path from {self.graph_analyzer.start_node} to {self.graph_analyzer.end_node}: {path}")
            junction_nodes = self.graph_analyzer.junction_analysis(path)
            print("Junction nodes -->", junction_nodes)

            moves = self.graph_analyzer.get_directions(path)
            print("Moves:", moves)

            concatenated_moves = self.graph_analyzer.concatenate_adjacent_elements(moves)
            print("Concatenated Moves:", concatenated_moves)

            if junction_nodes:
                if end_node not in junction_nodes:
                    vertex_edge_dict = self.graph_analyzer.create_vertex_edge_dict(path, moves, junction_nodes)
                    print("Vertex Edge Dict:", vertex_edge_dict)
                    # self.graph_analyzer.draw_graph(highlight_path=path, vertex_edge_dict=vertex_edge_dict)
                    draw_thread = threading.Thread(target=self.graph_analyzer.draw_graph, kwargs={'highlight_path': path, 'vertex_edge_dict': vertex_edge_dict})
                    draw_thread.start()
                    
                else:
                    print("000, Hi, I am executed")
                    # self.graph_analyzer.draw_graph(highlight_path=path, vertex_edge_dict=None)
                    draw_thread = threading.Thread(target=self.graph_analyzer.draw_graph, kwargs={'highlight_path': path, 'vertex_edge_dict': None})
                    draw_thread.start()
            else:
                print("111, Hi, I am executed")
                # self.graph_analyzer.draw_graph(highlight_path=path, vertex_edge_dict=None)
                draw_thread = threading.Thread(target=self.graph_analyzer.draw_graph, kwargs={'highlight_path': path, 'vertex_edge_dict': None})
                draw_thread.start()

        else:
            print(f"No path found from {self.graph_analyzer.start_node} to {self.graph_analyzer.end_node}")



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
